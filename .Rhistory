### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype)+(1|ASD)+(1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
ggplot(bands.H2, aes(bands, H2)) + geom_line()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
spectra_columns <- subset(spectra, select = c(1:11))
merged_1 <- merge(spectra_columns[which(spectra_columns$Trt== 'HN'),], spectra.blups.list[['HN']], by = 'genotype')
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blups.list[['LN']], by = 'genotype')
blups_merged <- merged_1 %>% full_join(merged_2)
blups_merged$Block <- factor(blups_merged$Block, levels= c('2', '4', '1', '3'))
write.csv(blups_merged, './spectra_blups.csv', row.names = FALSE)
write.csv(blups_merged, './extra_pheno_blups.csv', row.names = FALSE)
blups_merged <- read.csv('extra_pheno_blups.csv')
View(blups_merged)
blups_merged <- read.csv('extra_pheno_blups.csv')
str(blups_merged)
blups_merged$genotype <- factor(blups_merged$genotype)
blups_merged$PLOT.ID <- factor(blups_merged$PLOT.ID)
blups_merged$rows <- factor(blups_merged$rows)
blups_merged$ranges <- factor(blups_merged$ranges)
blups_merged$Block <- factor(blups_merged$Block)
blups_merged$Rep <- factor(blups_merged$Rep)
blups_merged$Trt  <- factor(blups_merged$Trt)
blups_merged$year <- factor(blups_merged$year)
blups_merged$note <- factor(blups_merged$note)
blups_merged$Calibration <- factor(blups_merged$Calibration)
blups_merged$ASD <- factor(blups_merged$ASD)
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
library(grid)
spectra <- read.csv('BGEM_extra_phenotypes.csv')
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra <- subset(spectra, select = -c(X))
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
View(spectra.list)
bands <- colnames(spectra)[c(13:17)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
spectra.blups.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
View(spectra.blups.list)
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 1:length(spectra.list)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype)+(1|ASD)+(1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
head(bands.H2)
head(bands.H2)
bands
ggplot(bands.H2, aes(bands, H2)) + geom_line()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2, aes(bands, H2)) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2, aes(bands, H2)) + geom_violin()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2, aes(bands, H2)) + geom_line()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
library(grid)
spectra <- read.csv('BGEM_extra_phenotypes.csv')
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
spectra <- subset(spectra, select = -c(X))
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
View(spectra.list)
bands <- colnames(spectra)[c(13:17)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
spectra.blups.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
View(spectra.blups.list)
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 1:length(spectra.list)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype)+(1|ASD)+(1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
head(bands.H2)
spectra_columns <- subset(spectra, select = c(1:11))
merged_1 <- merge(spectra_columns[which(spectra_columns$Trt== 'HN'),], spectra.blups.list[['HN']], by = 'genotype')
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blups.list[['LN']], by = 'genotype')
blups_merged <- merged_1 %>% full_join(merged_2)
blups_merged$Block <- factor(blups_merged$Block, levels= c('2', '4', '1', '3'))
write.csv(blups_merged, './extra_pheno_blups.csv', row.names = FALSE)
blups_merged <- read.csv('extra_pheno_blups.csv')
str(blups_merged)
View(blups_merged)
View(blups_merged[blups_merged$Rep == 1 , :])
View(blups_merged[blups_merged$Rep == 1 , ])
View(blups_merged[blups_merged$Rep == 2 , ])
View(spectra)
View(spectra.blups.list)
str(spectra)
levels(spectra$genotype)
View(data.frame(levels(spectra$genotype)))
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
library(grid)
spectra <- read.csv('BGEM_extra_phenotypes.csv')
View(spectra)
library(tidyverse)
GWAS_data <- read.csv('BGEM_extra_pheno_for_GWAS.csv')
View(GWAS_data)
GWAS_data_HN <- GWAS_data[GWAS_data$Trt == 'HN', ]
GWAS_data_HN
colnames(GWAS_data_HN)
GWAS <- subset(GWAS_data_HN, select = c(UID, leaf_length, leaf_width, ear_height, flag_leaf, plant_height))
View(GWAS)
GWAS_data <- read.csv('BGEM_extra_pheno_for_GWAS.csv')
View(GWAS_data)
GWAS <- subset(GWAS_data, select = c(UID, leaf_length, leaf_width, ear_height, flag_leaf, plant_height))
View(GWAS)
GWAS_data <- GWAS[GWAS$Trt == 'HN', ]
View(GWAS_data)
GWAS_data <- read.csv('BGEM_extra_pheno_for_GWAS.csv')
View(GWAS_data)
GWAS_data <- GWAS_data[GWAS_data$Trt == 'HN', ]
gc()
spectra <- read.csv("BGEM_extra_phenotypes.csv")
View(spectra)
levels(spectra$Trt)
str(spectra)
spectra <- subset(spectra, select = -c(Unnamed..0, X))
spectra <- subset(spectra, select = -c(X))
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
new_GID <- paste(spectra$genotype, spectra$Trt, sep= "_")
spectra_comb <- add_column(spectra, new_GID = new_GID, .after='PLOT.ID')
str(spectra_comb)
spectra_comb <- add_column(spectra, new_GID = new_GID, .after='PLOT.ID')
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
spectra_comb <- add_column(spectra, new_GID = new_GID, .after='PLOT.ID')
str(spectra_comb)
spectra_comb$new_GID  <- factor(spectra_comb$new_GID)
str(spectra_comb)
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
spectra.blues.list <- vector('list', 2)
spectra.blues.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blues.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blues.list[[i]]) <- 'genotype'
}
View(spectra.blues.list)
names(spectra.blues.list) <- c('HN', 'LN')
for(i in 1:length(spectra.list)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUE model is
spectrum.blue.mod <- lmer(reflectance ~ genotype + (1|ASD) + (1|Rep) ,  data = temp)
### The BLUEs centered around the mean can also be calculated and stored in a dataframe.
spectra.int <- fixef(spectrum.blue.mod)[1]
spectra.blues.temp <- fixef(spectrum.blue.mod)
spectra.blues.temp[-1] <- spectra.blues.temp[-1] + spectra.int
spectra.blues.temp <- data.frame (spectra.blues.temp)
spectra.blues.temp<- cbind(genotype=rownames(spectra.blues.temp), spectra.blues.temp)
rownames(spectra.blues.temp) <- NULL
spectra.blues.temp$genotype <- gsub('genotype', '', spectra.blues.temp$genotype)
colnames(spectra.blues.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blues.list[[i]] <- merge(spectra.blues.list[[i]], spectra.blues.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
View(spectra)
head(bands.H2)
bands.H2$bands <- as.character(bands.H2$bands)
ggplot(bands.H2, aes(bands, H2, color=Trt)) + geom_line()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')
ggplot(bands.H2, aes(bands, H2, color=Trt)) + geom_line()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')
names(spectra.blues.list[['HN']]) <- sub('.x', '', names(spectra.blues.list[['HN']]))
spectra_one_rep <- spectra[spectra$Rep == 1,]
spectra_columns <- subset(spectra_one_rep, select = c(1:12))
merged_1 <- merge(spectra_columns[which(spectra_columns$Trt== 'HN'),], spectra.blues.list[['HN']], by = 'genotype')
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blues.list[['LN']], by = 'genotype')
blues_merged <- merged_1 %>% full_join(merged_2)
write.csv(blues_merged, './extra_pheno_blues.csv', row.names = FALSE)
blues <- read_csv('extra_pheno_blues.csv')
blues <- as.data.frame(blues)
blues <- read_csv('extra_pheno_blues.csv')
View(blues_merged)
write.csv(blues_merged, './extra_pheno_blues.csv', row.names = FALSE)
blues <- read_csv('extra_pheno_blues.csv')
blues <- read_csv("extra_pheno_blues.csv")
blues <- read.csv("extra_pheno_blues.csv")
blues <- as.data.frame(blues)
blues <- blues %>% select(-contains(c('.x', '.y', '.z')))
blues <- blues[ , colSums(is.na(blues))==0]
str(blues)
blues$genotype <- as.factor(blues$genotype)
blues$PLOT.ID <- as.factor(blues$PLOT.ID)
blues$rows <- as.factor(blues$rows)
blues$ranges <- as.factor(blues$ranges)
blues$Block <- as.factor(blues$Block)
blues$Rep <- as.factor(blues$Rep)
blues$Trt <- as.factor(blues$Trt)
blues$year <- as.factor(blues$year)
blues$note <-as.factor(blues$note)
blues$Calibration <- as.factor(blues$Calibration)
blues$ASD <- as.factor(blues$ASD)
View(blues)
spectra_one_rep <- spectra[spectra$Rep == 2,]
spectra_columns <- subset(spectra_one_rep, select = c(1:12))
merged_1 <- merge(spectra_columns[which(spectra_columns$Trt== 'HN'),], spectra.blues.list[['HN']], by = 'genotype')
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blues.list[['LN']], by = 'genotype')
blues_merged <- merged_1 %>% full_join(merged_2)
View(blues_merged)
View(merged_1)
View(merged_2
)
spectra_one_rep <- spectra[spectra$Rep == 1,]
spectra_columns <- subset(spectra_one_rep, select = c(1:12))
merged_1 <- merge(spectra_columns[which(spectra_columns$Trt== 'HN'),], spectra.blues.list[['HN']], by = 'genotype')
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blues.list[['LN']], by = 'genotype')
blues_merged <- merged_1 %>% full_join(merged_2)
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
library(grid)
spectra <- read.csv("Raw_spectrum_merged")
View(spectra)
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
spectra <- read.csv("Raw_spectrum_merged")
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
View(spectra)
View(spectra)
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
library(grid)
spectra <- read.csv("Raw_spectrum_merged")
str(spectra)
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
spectra <- subset(spectra, select = -c(X))
spectra <- subset(spectra, select = -c( unnamed, X))
spectra <- subset(spectra, select = -c( Unnamed, X))
spectra <- subset(spectra, select = -c( Unnamed..0.1, X))
spectra <- subset(spectra, select = -c( Unnamed..0.1))
spectra <- subset(spectra, select = -c( Unnamed..0.2))
spectra <- subset(spectra, select = -c( Unnamed..0.1.1))
spectra <- subset(spectra, select = -c( Unnamed..0))
View(spectra[spectra$PLOT.ID == 4028])
View(spectra[spectra$PLOT.ID == 4028,])
View(spectra[spectra$PLOT.ID == 4028, genotype])
View(spectra[spectra$PLOT.ID == 4028, 'genotype'])
View(spectra[spectra$PLOT.ID == 4028, genotype])
View(spectra[spectra$PLOT.ID == 4028, 'genotype'])
View(spectra[spectra$PLOT.ID == 4028,])
View(spectra[spectra$PLOT.ID == 4028, note])
View(spectra[spectra$PLOT.ID == 4028, spectra$note])
View(spectra[which(spectra$PLOT.ID == 4028, genotype)])
View(spectra[which(spectra$PLOT.ID == 4028), genotype])
View(spectra[which(spectra$PLOT.ID == 4028), 'genotype'])
spectra %>% filter(PLOT.ID == 4028) %>% select(genotype)
spectra %>% filter(PLOT.ID == 4028) %>% select(genotype)[1]
spectra %>% filter(PLOT.ID == 4028) %>% select(genotype)[0,1]
spectra %>% filter(PLOT.ID == 4028) %>% select(genotype)
spectra %>% filter(genotype == 'BGEM-0292-S')
spectra %>% filter(genotype == 'BGEM-0292-S') %>% select(PLOT.ID)
cl()
clr()
clear()
spectra %>% filter(genotype == 'BGEM-0166-S') %>% select(PLOT.ID)
spectra %>% filter(genotype == 'BGEM-0073-S') %>% select(PLOT.ID)
spectra %>% filter(genotype == 'BGEM-0102-N') %>% select(PLOT.ID)
spectra %>% filter(genotype == 'BGEM-0312-S') %>% select(PLOT.ID)
spectra %>% filter(genotype == 'BGEM-0089-N') %>% select(PLOT.ID)
