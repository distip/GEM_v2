levels(spectra_comb$Trt)
spectra_comb.list<- spectra_comb
View(spectra_comb.list)
bands <- colnames(spectra_comb)[-c(1:13)]
bands
Trt <- as.character(levels(spectra_comb$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2 <- expand.grid(bands)
bands.H2
colnames(bands.H2) <- c('bands')
bands.H2$H2 <- NA
head(bands.H2)
spectra_comb.blups.list <- data.frame(levels(spectra_comb$new_GID))
spectra_comb.blups.list
spectra_comb.blups.list <- data.frame(levels(spectra_comb$new_GID))
View(spectra_comb.blups.list)
for(j in 1:length(bands)){
### The hyperspectra_combl data from just one N can be stored in a temporary variable.
temp <- spectra_comb.list
### The hyperspectra_combl data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra_comb.blups.list <- merge(spectra_comb.blups.list, spectra_comb.blups.temp, by = 'new_GID')
### counters can be used to track the progress
print(j)
}
temp <- spectra_comb.list
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('genotype', bands[j])
view(spectra.blups.temp)
view(spectra_comb.blups.temp)
for(j in 1:length(bands)){
### The hyperspectra_combl data from just one N can be stored in a temporary variable.
temp <- spectra_comb.list
### The hyperspectra_combl data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra_comb.blups.list <- merge(spectra_comb.blups.list, spectra_comb.blups.temp, by = 'new_GID')
### counters can be used to track the progress
print(j)
}
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$new_GID + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('genotype', bands[j])
levels(spectra_comb$Trt)
spectra_comb.list<- spectra_comb
bands <- colnames(spectra_comb)[-c(1:13)]
bands
Trt <- as.character(levels(spectra_comb$Trt))
bands.H2 <- expand.grid(bands)
colnames(bands.H2) <- c('bands')
bands.H2$H2 <- NA
head(bands.H2)
spectra_comb.blups.list <- data.frame(levels(spectra_comb$new_GID))
spectra_comb.blups.list
View(spectra_comb.blups.list)
for(j in 1:length(bands)){
### The hyperspectra_combl data from just one N can be stored in a temporary variable.
temp <- spectra_comb.list
### The hyperspectra_combl data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$new_GID + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra_comb.blups.list <- merge(spectra_comb.blups.list, spectra_comb.blups.temp, by = 'new_GID')
### counters can be used to track the progress
print(j)
}
temp <- spectra_comb.list
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
colnames(temp)[5] <- 'reflectance'
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$new_GID + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('genotype', bands[j])
spectra_comb.blups.list <- merge(spectra_comb.blups.list, spectra_comb.blups.temp, by = 'new_GID')
levels(spectra_comb$Trt)
spectra_comb.list<- spectra_comb
bands <- colnames(spectra_comb)[-c(1:13)]
Trt <- as.character(levels(spectra_comb$Trt))
bands.H2 <- expand.grid(bands)
colnames(bands.H2) <- c('bands')
bands.H2$H2 <- NA
spectra_comb.blups.list <- data.frame(levels(spectra_comb$new_GID))
for(j in 1:length(bands)){
### The hyperspectra_combl data from just one N can be stored in a temporary variable.
temp <- spectra_comb.list
### The hyperspectra_combl data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$new_GID + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('new_GID', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra_comb.blups.list <- merge(spectra_comb.blups.list, spectra_comb.blups.temp, by = 'new_GID')
### counters can be used to track the progress
print(j)
}
view(spectra_comb.blups.list)
View(spectra_comb.blups.list)
colnames(spectra_comb.blups.list) <- c('new_GID')
View(spectra_comb.blups.list)
levels(spectra_comb$Trt)
spectra_comb.list<- spectra_comb
bands <- colnames(spectra_comb)[-c(1:13)]
Trt <- as.character(levels(spectra_comb$Trt))
bands.H2 <- expand.grid(bands)
colnames(bands.H2) <- c('bands')
bands.H2$H2 <- NA
head(bands.H2)
spectra_comb.blups.list <- data.frame(levels(spectra_comb$new_GID))
colnames(spectra_comb.blups.list) <- c('new_GID')
View(spectra_comb.blups.list)
for(j in 1:length(bands)){
### The hyperspectra_combl data from just one N can be stored in a temporary variable.
temp <- spectra_comb.list
### The hyperspectra_combl data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('new_GID', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|new_GID) + (1|ASD) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra_comb.blups.temp <- ranef(spectrum.blup.mod)$new_GID + fixef(spectrum.blup.mod)
spectra_comb.blups.temp <- data.frame(rownames(spectra_comb.blups.temp), spectra_comb.blups.temp)
colnames(spectra_comb.blups.temp) <- c('new_GID', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra_comb.blups.list <- merge(spectra_comb.blups.list, spectra_comb.blups.temp, by = 'new_GID')
### counters can be used to track the progress
print(j)
}
bands.H2$bands <- as.character(bands.H2$bands)
bands.H2$bands<- as.numeric(substr(bands.H2$bands,2,5))
ggplot(bands.H2, aes(bands, H2)) + geom_line()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw()
names(spectra.blups.list) <- sub('.x', '', names(spectra.blups.list))
names(spectra_comb.blups.list) <- sub('.x', '', names(spectra_comb.blups.list))
spectra_comb_columns <- subset(spectra_comb, select = c(1:13))
View(spectra_comb)
spectra_comb_columns <- subset(spectra_comb, select = c(1:13))
merged_1 <- merge(spectra_comb_columns, spectra_comb.blups.list, by = 'new_GID')
blups_merged_v2 <- merged_1
blups_merged_v2$Block <- factor(blups_merged$Block, levels= c('2', '4', '1', '3'))
write.csv(blups_merged_v2, './spectra_comb_blups_v2.csv', row.names = FALSE)
blups_merged_v2 <- read.csv('spectra_comb_blups_v2.csv')
blups_merged_v2$note <- NA
for(i in 1:length(blups_merged_v2$genotype)){
gen <- as.character(blups_merged_v2$genotype[i])
if(grepl(' X ', gen)){
blups_merged_v2$note[i] <- 'Hybrid'
}
else{
blups_merged_v2$note[i] <- 'Inbred'
}
}
spectra_comb.blups.melt.2 <- melt(blups_merged_v2, id.vars = c('PLOT.ID','new_GID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Calibration', 'ASD'))
a <- sapply(strsplit(as.character(spectra_comb.blups.melt.2$variable), '[.]'), '[[', 1)
spectra_comb.blups.melt.2$wavelength <- as.numeric(substr(a,2,5))
ggplot(blups_merged_v2, aes(rows, ranges, color=X730)) +
geom_point(size=1.3) +
scale_y_continuous(name='ranges', limits = c(1,13))+
geom_rect( aes(xmin=0.4, xmax = 51, ymin = 7.5, ymax = 12.5), fill=NA, colour='red')+
#annotate('rect', xmin=0, xmax = 50, ymin = 7.5, ymax = 12.5, alpha= .1)+
facet_wrap(~Trt)+
scale_colour_viridis() +
labs(title = 'Spatial Map of leaf spectrum after BLUPs \n (1|genotype)+(1|ASD)+(1|Rep)', caption = ' Blocks 1 and 4 = + N , 2 and 3 = -N\nred rectangles represent the hybrids ')+
theme_classic()
ggplot(blups_merged_v2, aes(rows, ranges, color=X550)) +
geom_point(size=1.3) +
scale_y_continuous(name='ranges', limits = c(1,13))+
geom_rect( aes(xmin=0.4, xmax = 51, ymin = 7.5, ymax = 12.5), fill=NA, colour='red')+
#annotate('rect', xmin=0, xmax = 50, ymin = 7.5, ymax = 12.5, alpha= .1)+
facet_wrap(~Trt)+
scale_colour_viridis() +
labs(title = 'Spatial Map of leaf spectrum after BLUPs \n (1|genotype)+(1|ASD)+(1|Rep)', caption = ' Blocks 1 and 4 = + N , 2 and 3 = -N\nred rectangles represent the hybrids ')+
theme_classic()
View(blups_merged_v2)
View(spectra_comb.blups.melt.2)
data <-melt(blups_merged_v2, id.vars = c('PLOT.ID','new_GID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Calibration', 'ASD'))
View(data)
blups_merged_v2 <- read.csv('spectra_comb_blups_v2.csv')
str(blups_merged_v2)
blups_merged_v2$genotype <- factor(blups_merged_v2$genotype)
blups_merged_v2$PLOT.ID <- factor(blups_merged_v2$PLOT.ID)
blups_merged_v2$rows <- factor(blups_merged_v2$rows)
blups_merged_v2$new_GID <- factor(blups_merged_v2$new_GID)
blups_merged_v2$genotype <- factor(blups_merged_v2$genotype)
blups_merged_v2$PLOT.ID <- factor(blups_merged_v2$PLOT.ID)
blups_merged_v2$rows <- factor(blups_merged_v2$rows)
blups_merged_v2$ranges <- factor(blups_merged_v2$ranges)
blups_merged_v2$Block <- factor(blups_merged_v2$Block)
blups_merged_v2$Rep <- factor(blups_merged_v2$Rep)
blups_merged_v2$Trt  <- factor(blups_merged_v2$Trt)
blups_merged_v2$year <- factor(blups_merged_v2$year)
blups_merged_v2$note <- factor(blups_merged_v2$note)
blups_merged_v2$Calibration <- factor(blups_merged_v2$Calibration)
blups_merged_v2$ASD <- factor(blups_merged_v2$ASD)
spectra_comb_columns <- subset(spectra_comb, select = c(1:13))
merged_1 <- merge(spectra_comb_columns, spectra_comb.blups.list, by = 'new_GID')
blups_merged_v2 <- merged_1
str(blups_merged_v2)
blups_merged_v2$genotype <- factor(blups_merged_v2$genotype)
blups_merged_v2$PLOT.ID <- factor(blups_merged_v2$PLOT.ID)
blups_merged_v2$rows <- factor(blups_merged_v2$rows)
blups_merged_v2$ranges <- factor(blups_merged_v2$ranges)
blups_merged_v2$Block <- factor(blups_merged_v2$Block)
blups_merged_v2$Rep <- factor(blups_merged_v2$Rep)
blups_merged_v2$Trt  <- factor(blups_merged_v2$Trt)
blups_merged_v2$year <- factor(blups_merged_v2$year)
blups_merged_v2$note <- factor(blups_merged_v2$note)
blups_merged_v2$Calibration <- factor(blups_merged_v2$Calibration)
blups_merged_v2$ASD <- factor(blups_merged_v2$ASD)
blups_merged_v2$new_GID <- factor(blups_merged_v2$new_GID)
write.csv(blups_merged_v2, './spectra_comb_blups_v2.csv', row.names = FALSE)
data <-melt(blups_merged_v2, id.vars = c('PLOT.ID','new_GID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Group', 'Calibration', 'ASD'))
View(data)
a <- sapply(strsplit(as.character(data$variable), '[.]'), '[[', 1)
data$wavelength <- as.numeric(substr(a,2,5))
View(data)
ggplot() +
geom_line(data=data[which(data$Trt == 'LN'),],aes(wavelength, value, group= genotype, color='LN'), size=0.1)+
geom_line(data=data[which(data$Trt == 'HN'),], aes(wavelength, value, group= genotype, color='HN'), size=0.1)+
scale_color_manual(name='Treatment',  values = c('HN'= 'green', 'LN' = 'yellow'))
ggplot() +
geom_line(data=data[which(data$Trt == 'LN'),],aes(wavelength, value, group= new_GID, color='LN'), size=0.1)+
geom_line(data=data[which(data$Trt == 'HN'),], aes(wavelength, value, group= new_GID, color='HN'), size=0.1)+
scale_color_manual(name='Treatment',  values = c('HN'= 'green', 'LN' = 'yellow'))
data2 <- data %>% group_by(wavelength,Trt) %>%
summarise(mean.ref = mean(value, na.rm=TRUE), sd.ref = sd(value, na.rm = TRUE), se.ref= sd(value, na.rm=TRUE)/sqrt(length(value)),
max = max(value, na.rm = TRUE), min = min(value, na.rm = TRUE))
plt_blups <- ggplot(data=data2, aes(x=wavelength, group= note)) +
geom_line(aes(y=mean.ref, color=note), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref , fill=note),alpha=0.3)+
labs(title = 'Leaf spectra_comb inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blups
plt_blups
ggplot(data = data)+
geom_line(aes(wavelength, value, group=genotype, color=Trt), size=0.1)+
labs(title = 'Leaf spectra_comb (BLUPS)', x='bands', y='reflectance')
blups_merged_v2 <- blups_merged_v2[blups_merged_v2$Rep == 2 , ]
a <- sapply(strsplit(as.character(data$variable), '[.]'), '[[', 1)
data <-melt(blups_merged_v2, id.vars = c('PLOT.ID','new_GID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Group', 'Calibration', 'ASD'))
data <-melt(blups_merged_v2, id.vars = c('PLOT.ID','new_GID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Group', 'Calibration', 'ASD'))
a <- sapply(strsplit(as.character(data$variable), '[.]'), '[[', 1)
View(data)
plt_blups <- ggplot(data=data2, aes(x=wavelength, group= note)) +
geom_line(aes(y=mean.ref, color=note), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref , fill=note),alpha=0.3)+
labs(title = 'Leaf spectra_comb inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blups
plt_blups <- ggplot(data=data2, aes(x=wavelength, group= Group)) +
geom_line(aes(y=mean.ref, color=note), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref , fill=note),alpha=0.3)+
labs(title = 'Leaf spectra_comb inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blups
View(data2)
plt_blups <- ggplot(data=data2, aes(x=wavelength, group= Trt)) +
geom_line(aes(y=mean.ref, color=note), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref , fill=note),alpha=0.3)+
labs(title = 'Leaf spectra_comb inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blups
note
plt_blups <- ggplot(data=data2, aes(x=wavelength, group= Trt)) +
geom_line(aes(y=mean.ref, color=Trt), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref , fill=note),alpha=0.3)+
labs(title = 'Leaf spectra_comb inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blups
plt_blups <- ggplot(data=data2, aes(x=wavelength, group= Trt)) +
geom_line(aes(y=mean.ref, color=Trt), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref),alpha=0.3)+
labs(title = 'Leaf spectra_comb inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blups
ggplot() +
geom_line(data=data[which(data$Trt == 'LN'),],aes(wavelength, value, group= new_GID, color='LN'), size=0.1)+
geom_line(data=data[which(data$Trt == 'HN'),], aes(wavelength, value, group= new_GID, color='HN'), size=0.1)+
scale_color_manual(name='Treatment',  values = c('HN'= 'green', 'LN' = 'yellow'))
data <-melt(blups_merged_v2, id.vars = c('PLOT.ID','new_GID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Group', 'Calibration', 'ASD'))
a <- sapply(strsplit(as.character(data$variable), '[.]'), '[[', 1)
data$wavelength <- as.numeric(substr(a,2,5))
View(data)
ggplot() +
geom_line(data=data[which(data$Trt == 'LN'),],aes(wavelength, value, group= new_GID, color='LN'), size=0.1)+
geom_line(data=data[which(data$Trt == 'HN'),], aes(wavelength, value, group= new_GID, color='HN'), size=0.1)+
scale_color_manual(name='Treatment',  values = c('HN'= 'green', 'LN' = 'yellow'))
ggplot(data = data)+
geom_line(aes(wavelength, value, group=new_GID, color=Trt), size=0.1)+
labs(title = 'Leaf spectra_comb (BLUPS)', x='bands', y='reflectance')
ggplot(data = data)+
geom_line(aes(wavelength, value, group=new_GID, color=Trt), size=0.1)+
labs(title = 'Leaf spectra_comb (BLUPS)', x='bands', y='reflectance')+
theme_bw()
res.pca <- prcomp(blups_merged_v2[ , 14:length(colnames(blups_merged_v2))], scale = FALSE)
basic_plot <- fviz_pca_ind(res.pca, label= 'none')
library(FactoMineR)
library(ggplot2)
library(factoextra)
library(tidyverse)
basic_plot <- fviz_pca_ind(res.pca, label= 'none')
basic_plot
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, col=Group))+
geom_point(size=2)+
labs(title = 'PCA', x='Dim1 (82.7%)', y= 'Dim2 (12.4%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt,  col=Group))+
geom_point(size=2)+
labs(title = 'PCA', x='Dim1 (82.7%)', y= 'Dim2 (12.4%)')+
#stat_ellipse()+
theme_bw(14)
basic_plot
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt,  col=Group))+
geom_point(size=2)+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Group,  col=Trt))+
geom_point(size=2)+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Group,  col=Trt))+
geom_point(size=1)+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Group,  col=Trt))+
geom_point(size=1.5)+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt,  col=Group))+
geom_point(size=1.5)+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt,  col=Group))+
geom_point(size=2)+
scale_shape_manual(values = c(1,2))
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt,  col=Group))+
geom_point(size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt,  col=Group))+
geom_point(size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt))+
geom_point(col= Group, size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt))+
geom_point(aes(col= Group), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt))+
geom_point(aes(col= Trt), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape= Trt))+
geom_point(aes(col= Group), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, col=Group))+
geom_point(aes(shape= Trt), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape=Trt))+
geom_point(aes(col=Group), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape=Trt))+
geom_point(aes(col=Group), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape=Trt))+
geom_point(aes(col=ASD), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group', 'ASD')]), aes(x=x, y=y, shape=Trt))+
geom_point(aes(col=ASD), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
basic_plot <- fviz_pca_ind(res.pca, label= 'none')
basic_plot
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape=Trt))+
geom_point(aes(col=Group), size=2)+
scale_shape_manual(values = c(1,2))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
gc()
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape=Trt))+
geom_point(aes(col=Group), size=2)+
scale_shape_manual(values = c(1,16))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
ggplot(cbind(basic_plot$data, blups_merged_v2[, c('Trt', 'note', 'Group')]), aes(x=x, y=y, shape=Group))+
geom_point(aes(col=Trt), size=2)+
scale_shape_manual(values = c(1,16))+
labs(title = 'PCA', x='Dim1 (73.8%)', y= 'Dim2 (19.8%)')+
#stat_ellipse()+
theme_bw(14)
