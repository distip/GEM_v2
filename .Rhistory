spectra.blues.temp<- cbind(genotype=rownames(spectra.blues.temp), spectra.blues.temp)
rownames(spectra.blues.temp) <- NULL
spectra.blues.temp$genotype <- gsub('genotype', '', spectra.blues.temp$genotype)
colnames(spectra.blues.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blues.list[[i]] <- merge(spectra.blues.list[[i]], spectra.blues.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blues.list[['LN']], by = 'genotype', all.x = TRUE )
colnames(merged_2)
merged_1 <- spectra[spectra$Trt == 'HN', bands]
colnames(merged_1)
merged_1 <- spectra[spectra$Trt == 'HN', ]
colnames(merged_1)
merged_1 <- spectra[spectra$Trt == 'HN', -c("Row" , "Ran."  , "Leaf.Length.1" , "Leaf.Width.1", "Leaf.Length.2", "Leaf.Width.2",  "Ear.Height.1",
"Flag.Leaf.Height.1",  "Plant.Height.1", "Ear.Height.2", "Flag.Leaf.Height.2",
"Plant.Height.2" , "Yang.Field.Notes"  , "Inbred.or.Hybrid.",  "Data.missing.") ]
merged_1 <- spectra[spectra$Trt == 'HN', -c(Row" , "Ran."  , "Leaf.Length.1" , "Leaf.Width.1", "Leaf.Length.2", "Leaf.Width.2",  "Ear.Height.1",
"Flag.Leaf.Height.1",  "Plant.Height.1", "Ear.Height.2", "Flag.Leaf.Height.2",
"Plant.Height.2" , "Yang.Field.Notes"  , "Inbred.or.Hybrid.",  "Data.missing.') ]
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blues.list[['LN']], by = 'genotype', all.x = TRUE )
blues_merged <- merged_1 %>% full_join(merged_2)
blues_merged$Block <- factor(blues_merged$Block, levels= c('2', '4', '1', '3'))
write.csv(blues_merged, './extra_pheno_blues.csv', row.names = FALSE)
blues <- read.csv("extra_pheno_blues.csv")
blues <- as.data.frame(blues)
blues <- blues %>% select(-contains(c('.x', '.y', '.z')))
blues <- blues[ , colSums(is.na(blues))==0]
str(blues)
blues$genotype <- as.factor(blues$genotype)
blues$PLOT.ID <- as.factor(blues$PLOT.ID)
blues$rows <- as.factor(blues$rows)
blues$ranges <- as.factor(blues$ranges)
blues$Block <- as.factor(blues$Block)
blues$Rep <- as.factor(blues$Rep)
blues$Trt <- as.factor(blues$Trt)
blues$year <- as.factor(blues$year)
blues$note <-as.factor(blues$note)
blues$Calibration <- as.factor(blues$Calibration)
blues$ASD <- as.factor(blues$ASD)
blues_plot <- melt(blues, id.vars = c('PLOT.ID', 'genotype','rows', 'ranges', 'Block' ,'Rep', 'Trt', 'year', 'note', 'Group'))
a <- sapply(strsplit(as.character(blues_plot$variable), '[.]'), '[[', 1)
blues_plot$wavelength <- as.numeric(substr(a,2,5))
blues_plot$wavelength <- as.numeric(blues_plot$wavelength)
data <- blues_plot %>% group_by(wavelength,Group) %>%
summarise(mean.ref = mean(value, na.rm=TRUE), sd.ref = sd(value, na.rm = TRUE), se.ref= sd(value, na.rm=TRUE)/sqrt(length(value)),
max = max(value, na.rm = TRUE), min = min(value, na.rm = TRUE))
plt_blues <- ggplot(data=data, aes(x=wavelength, group= genotype)) +
geom_line(aes(y=mean.ref, color=Group), size = 0.6)+
geom_ribbon(aes(ymin=mean.ref-se.ref , ymax=mean.ref+se.ref , fill=Group),alpha=0.3)+
labs(title = 'Leaf Spectra inbred vs hybrids under HN', caption = '**Envelopes represent 1 sd from the mean')+
theme_bw()
plt_blues
blues_plot_2 <- ggplot() +
geom_line(data=blues_plot[which(blues_plot$Trt == 'HN'),],aes(wavelength, value, group= genotype, color='HN'), size=0.05)+
geom_line(data=blues_plot[which(blues_plot$Trt == 'LN'),], aes(wavelength, value, group= genotype, color='LN'), size=0.05)+
scale_color_manual(name='Treatment',  values = c('HN'= 'green', 'LN' = 'yellow'))
blues_plot_2
blues_plot <- ggplot(data = blues_plot)+
geom_line(aes(wavelength, value, group=genotype, color=Trt), size=0.1)+
labs(title = 'Leaf spectra (BLUES)', x='bands', y='reflectance')
ggplot(blues_merged, aes(rows, ranges, color=X730)) +
geom_point(size=1.3) +
scale_y_continuous(name='ranges', limits = c(1,13))+
geom_rect( aes(xmin=0.4, xmax = 51, ymin = 7.5, ymax = 12.5), fill=NA, colour='red')+
#annotate('rect', xmin=0, xmax = 50, ymin = 7.5, ymax = 12.5, alpha= .1)+
facet_wrap(~Trt)+
scale_colour_viridis() +
labs(title = 'BLUEs Corrected \n genotype+(1|ASD)+(1|Block:Rep)', caption = ' Blocks 1 and 4 = + N , 2 and 3 = -N\nred rectangles are the hybrids ')+
theme_classic()
#theme(strip.background = element_rect(color = 'black', fill = Trt))
### To look at the hyperspectral data from multiple genotypes on a single data, the first
### fifteen genotypes from the first date can be pulled out. As before, melt() moves the
### spectral bands from columns to rows, and the wavelengths need to be extracted from the
### band labels.
spectra.blues.sub.melt <- melt(spectra.blues.list)
a <- sapply(strsplit(as.character(spectra.blues.sub.melt$variable), '[.]'), '[[', 1)
spectra.blues.sub.melt$wavelength <- as.numeric(substr(a,2,5))
merged_1 <- spectra[spectra$Trt == 'HN', -c("Row" , "Ran."  , "Leaf.Length.1" , "Leaf.Width.1", "Leaf.Length.2", "Leaf.Width.2",  "Ear.Height.1",
"Flag.Leaf.Height.1",  "Plant.Height.1", "Ear.Height.2", "Flag.Leaf.Height.2",
"Plant.Height.2" , "Yang.Field.Notes"  , "Inbred.or.Hybrid.",  "Data.missing.") ]
merged_1 <- spectra[spectra$Trt == 'HN', -c("Row") ]
merged_1 <- spectra[spectra$Trt == 'HN', -c(Row) ]
merged_1 <- spectra[spectra$Trt == 'HN', -c(Row.) ]
colnames(merged_1)
merged_1 <- spectra[spectra$Trt == 'HN', -c(Row) ]
merged_1 <- spectra[spectra$Trt == 'HN', -c('Row') ]
merged_1 <- spectra[spectra$Trt == 'HN', c('Row') ]
merged_1 <- spectra[spectra$Trt == 'HN', -c('Row') ]
merged_1 <- spectra[spectra$Trt == 'HN', ]
merged_1 <- subset(merged_1 , select = -c(Row, Ran., Leaf.Length.1, Leaf.Width.1, Leaf.Length.2, Leaf.Width.2, Ear.Height.1, Flag.Leaf.Height.1, Plant.Height.1,
Ear.Height.2, Flag.Leaf.Height.2, Plant.Height.2, Yang.Field.Notes, Inbred.or.Hybrid., Data.missing.))
View((merged_1))
View(merged_2)
View(merged_1)
merged_1 <- spectra[spectra$Trt == 'HN', ]
merged_1 <- spectra_one_rep[spectra_one_rep$Trt == 'HN', ]
merged_1 <- subset(merged_1 , select = -c(Row, Ran., Leaf.Length.1, Leaf.Width.1, Leaf.Length.2, Leaf.Width.2, Ear.Height.1, Flag.Leaf.Height.1, Plant.Height.1,
Ear.Height.2, Flag.Leaf.Height.2, Plant.Height.2, Yang.Field.Notes, Inbred.or.Hybrid., Data.missing.))
View(merged_1)
blues_merged <- merged_1 %>% full_join(merged_2)
write.csv(blues_merged, './extra_pheno_blues.csv', row.names = FALSE)
View(blues_merged)
spectra <- read.csv('BGEM_extra_phenotypes.csv')
spectra$Rep <- factor(spectra$Rep)
spectra$Block <- factor(spectra$Block)
spectra$year <- factor(spectra$year)
spectra$genotype <- factor(spectra$genotype)
spectra$note <- factor(spectra$note)
spectra$Trt <- factor(spectra$Trt)
spectra$ASD <- factor(spectra$ASD)
spectra$Group <- factor(spectra$Group)
spectra$rows <- factor(spectra$rows)
spectra$ranges <- factor(spectra$ranges)
spectra$PLOT.ID <- factor(spectra$PLOT.ID)
spectra$ASD  <- factor(spectra$ASD)
spectra$Calibration <- factor(spectra$Calibration)
spectra <- subset(spectra, select = -c(X))
str(spectra)
## removing block 4  ##
spectra[c(1051:1400), c('leaf_length', 'leaf_width' , 'ear_height', 'flag_leaf',  'plant_height') ] <- NA
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
bands <- colnames(spectra)[c(13:17)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
spectra.blups.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 2:2){ #length(spectra.list)
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
merged_2 <- merge(spectra_columns[which(spectra_columns$Trt== 'LN'),], spectra.blups.list[['LN']], by = 'genotype', all.x = TRUE)
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
bands <- colnames(spectra)[c(13:17)]
Trt <- as.character(levels(spectra$Trt))
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 1:1){ #length(spectra.list)
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
merged_1 <- merge(spectra_columns[which(spectra_columns$Trt== 'HN'),], spectra.blups.list[['HN']], by = 'genotype', all.x = TRUE)
blups_merged <- merged_1 %>% full_join(merged_2)
View(blups_merged)
write.csv(blups_merged, './extra_pheno_blups.csv', row.names = FALSE)
data <- read_csv('extra_pheno_blues.csv')
write.csv(blues_merged, './extra_pheno_blues.csv', row.names = FALSE)
data <- read_csv('extra_pheno_blues.csv')
View(data)
melt = melt(data=data, id =c("genotype"   ,  "PLOT.ID"    ,  "rows"   ,      "ranges"   ,    "Block"    ,    "Rep"        ,  "Group"  ,      "Trt"    ,      "year" ,        "note" ,
"Calibration",  "ASD" ))
View(melt)
ggplot(data=melt, aes(x=Trt , y=value)) +
geom_boxplot()+
facet_wrap(vars(variable) , scales = 'free')+
theme_bw(16)
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
bands <- colnames(spectra)[c(13:17)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 2:2)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[4]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
bands <- colnames(spectra)[c(13:17)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 2:2){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', 'Block', 'ASD', bands[j]))]
colnames(temp)[5] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) + (1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[3]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
head(bands.H2)
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(bands, H2)) + geom_point()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(bands, H2)) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(bands, H2)) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(H2), group=bands) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
View(bands.H2[bands.H2$Trt == 'LN', )
View(bands.H2[bands.H2$Trt == 'LN',] )
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(y=H2), group=bands) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(y=H2, x=bands), group=bands) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ], aes(y=H2)) + geom_bar()+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stats = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(70,100)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.70,1)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.70,1)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.70,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.7,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.6,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.5,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.4,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.3,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.1,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity', aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
ylim(0.75,1.0)+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
coord_cartesian(ylim=c(0.70, 1.0))+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
coord_cartesian(ylim=c(0.5, 1.0))+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
coord_cartesian(ylim=c(0.75, 1.0))+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
coord_cartesian(ylim=c(0.75, 0.9))+
theme_bw(16)
ggplot(bands.H2[bands.H2$Trt == 'LN', ]) +
geom_bar(stat = 'identity' , aes(x= bands, y=H2))+
labs(title = 'Broad Sense Heritabilities')+
coord_cartesian(ylim=c(0.50, 1))+
theme_bw(16)
