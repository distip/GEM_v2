for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
View(spectra.list)
bands <- colnames(spectra)[c(6)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
spectra.blups.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 1:length(spectra.list)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', bands[j]))]
colnames(temp)[3] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) +(1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[3]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
head(bands.H2)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability Under Different Nitrogen Applications')+
theme_bw(16)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability Under Different Nitrogen Applications')+
theme_bw(10)
spectra <- spectra[spectra$Group == 'Inbred', ]
View(spectra)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
bands <- colnames(spectra)[c(6)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
spectra.blups.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 1:length(spectra.list)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', bands[j]))]
colnames(temp)[3] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) +(1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[3]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
head(bands.H2)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbred')+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbreds')+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbreds'))+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbreds)')+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbreds)')+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbreds)')+
theme_bw(10)
levels(spectra$Trt)
spectra.list <- vector('list' , 2)
spectra.list
for(i in 1:2) {
##The appropriate N can be pulled out using which().
spectra.list[[i]] <- spectra[which(spectra$Trt ==levels(spectra$Trt)[i]),]
### To keep track of where each N appears within the list, names() can be used to
### set the name of each list element to the N
names(spectra.list)[i] <- levels(spectra$Trt)[i]
}
bands <- colnames(spectra)[c(6)]
bands
Trt <- as.character(levels(spectra$Trt))
Trt
bands.H2 <- expand.grid(bands, Trt)
bands.H2
colnames(bands.H2) <- c('bands', 'Trt')
bands.H2$H2 <- NA
head(bands.H2)
spectra.blups.list <- vector('list', 2)
spectra.blups.list
for(i in 1:2){
### To get started, a dataframe containing only the "gid" column can be created for each
### element of the list.
spectra.blups.list[[i]] <- data.frame(levels(spectra$genotype))
colnames(spectra.blups.list[[i]]) <- 'genotype'
}
names(spectra.blups.list) <- c('HN', 'LN')
for(i in 1:length(spectra.list)){
for(j in 1:length(bands)){
### The hyperspectral data from just one N can be stored in a temporary variable.
temp <- spectra.list[[i]]
### The hyperspectral data from just one band can be pulled out along with the field
### design variables.
temp <- temp[, which(colnames(temp) %in% c('genotype', 'Rep', bands[j]))]
colnames(temp)[3] <- 'reflectance'
### The BLUP model is
spectrum.blup.mod <- lmer(reflectance ~ (1|genotype) +(1|Rep) , data = temp)
### The variance components can be extracted to calculate broad-sense heritability.
Vg <- data.frame(VarCorr(spectrum.blup.mod))$vcov[1]
Ve <- data.frame(VarCorr(spectrum.blup.mod))$vcov[3]
H2 <- Vg/(Vg+(Ve/2))
### The broad-sense heritability can be put in the appropriate place within the
### bands.H2 dataframe using which().
bands.H2[which(bands.H2$bands == bands[j] & bands.H2$Trt == names(spectra.list)[i]), 'H2'] <- H2
### The BLUPs centered around the mean can also be calculated and stored in a dataframe.
spectra.blups.temp <- ranef(spectrum.blup.mod)$genotype + fixef(spectrum.blup.mod)
spectra.blups.temp <- data.frame(rownames(spectra.blups.temp), spectra.blups.temp)
colnames(spectra.blups.temp) <- c('genotype', bands[j])
### The BLUPs can be merged based on the "genotype" column with the existing dataframes
### in the BLUPs list using the merge() function.
spectra.blups.list[[i]] <- merge(spectra.blups.list[[i]], spectra.blups.temp, by = 'genotype')
### counters can be used to track the progress
print(i)
print(j)
}
}
head(bands.H2)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity', Group=Trt)+
labs(title = 'CHL Heritability (Only Inbreds)')+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity')+
labs(title = 'CHL Heritability (Only Inbreds)')+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity')+
labs(title = 'CHL Heritability (Only Inbreds)')+
xlim(c(0.0 , 0.8))
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity')+
labs(title = 'CHL Heritability (Only Inbreds)')+
xlim(c(0.0 , 0.8))+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity')+
labs(title = 'CHL Heritability (Only Inbreds)')+
xlim(... = c(0.0 , 0.8))+
theme_bw(10)
ggplot(bands.H2, aes(y=H2, x=Trt)) + geom_bar(stat='identity')+
labs(title = 'CHL Heritability (Only Inbreds)')+
ylim(c(0, 0.8))+
theme_bw(10)
CHL_blups_HN <- spectra.blups.list[['HN']]
View(CHL_blups_HN)
CHL_blups_LN <- spectra.blups.list[['LN']]
names(CHL_blups_HN)[2] <- 'CHL_blups_HN'
names(CHL_blups_LN)[2] <- 'CHL_blups_LN'
blups_CHL_LN_HN_sperately <- merge(CHL_blups_HN, CHL_blups_LN , by = 'genotype')
View(blups_CHL_LN_HN_sperately)
write.csv(blups_CHL_LN_HN_sperately, './blups_CHL_LN_HN_seperately.csv')
library(tidyverse)
library(ggplot2)
data <- read.csv('Spectrum_with_biochemical_traits.csv')
Viev(data)
colnames(data)
colnames(data)[0:25]
data_sub <- subset(data, select = c('PLOT ID', "X..N" ,"X..P" ,"X..K", "X..S", "X..Ca", "X..Mg", "ppm.Zn", "ppm.Fe", "ppm.Mn",  "ppm.Cu",
"ppm.B", "ppm.Mo", "Rep", "Group", "Trt", "genotype" ,"note"))
subset(data, select=c(PLOT ID))
subset(data, select=c('PLOT ID'))
data %>% subset(select=c(PLOT ID))
data_sub <- subset(data, select = c('PLOT.ID', "X..N" ,"X..P" ,"X..K", "X..S", "X..Ca", "X..Mg", "ppm.Zn", "ppm.Fe", "ppm.Mn",  "ppm.Cu",
"ppm.B", "ppm.Mo", "Rep", "Group", "Trt", "genotype" ,"note"))
data_sub
View(data_sub)
data_sub %>% filter(X..N != nan)
data_sub %>% filter(X..N != NA)
data_non_na <- data_sub %>% filter(X..N != NA)
View(data_non_na)
data_non_na <- data_sub %>% filter(!is.na(X..N))
View(data_non_na)
melted <- data_non_na %>% melt(PLOT.ID)
librar(MASS)
library(MASS)
melted <- data_non_na %>% melt(PLOT.ID)
library(tidyverse)
melted <- melt(data_non_na, id= c('PLOT.ID'))
library(matrix)
library(Matrix)
melted <- melt(data_non_na, id= c('PLOT.ID'))
melted <- melt(data_non_na, id.vars= c('PLOT.ID'))
spectra.sub.melt <- melt(spectra.sub, id.vars = c('PLOT.ID', 'Block' ,'Rep', 'Trt', 'year', 'genotype', 'note', 'Calibration', 'ASD'))
library(Matrix)
library(lme4)
library(reshape2)
library(rrBLUP)
library(ggplot2)
library(tidyverse)
library(viridisLite)
library(viridis)
library(grid)
spectra.sub.melt <- melt(spectra.sub, id.vars = c('PLOT.ID', 'Block' ,'Rep', 'Trt', 'year', 'genotype', 'note', 'Calibration', 'ASD'))
library(reshape2)
melted <- melt(data_non_na, id.vars= c('PLOT.ID'))
View(melted)
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'Genotype', 'note'))
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'genotype', 'note'))
View(melted)
ggplot(data = data_non_na)  +
geom_density(aes(x='X..N', group=Trt))
ggplot(data = data_non_na)  +
geom_density(aes(y='X..N', group=Trt))
ggplot(data = data_non_na)  +
geom_density(aes('X..N', group=Trt))
ggplot(data = data_non_na)  +
geom_density(aes('X..N', Fill=Trt))
ggplot(data = data_non_na)  +
geom_density(aes('X..N', fill=Trt))
ggplot(data = data_non_na)  +
geom_density(aes(X..N, fill=Trt))
ggplot(data = data_non_na)  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)
ggplot(data = data_non_na)  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_classic()
ggplot(data = data_non_na)  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)
ggplot(data = data_non_na)  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
labs(title = 'Nitrogen Contents')
ggplot(data = data_non_na)  +
geom_density(aes(X..N, fill=Group), alpha=0.3)+
theme_bw(14)+
labs(title = 'Nitrogen Contents')
ggplot(data = data_non_na[data_non_na$Group='Hybrid'])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
labs(title = 'Nitrogen Contents')
ggplot(data = data_non_na[data_non_na$Group='Hybrid',])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
labs(title = 'Nitrogen Contents')
data_non_na[data_non_na$Group='Hybrid',]
ggplot(data = data_non_na[data_non_na$Group =='Hybrid',])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
labs(title = 'Nitrogen Contents')
ggplot(data = data_non_na[data_non_na$Group =='Inbred',])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
labs(title = 'Nitrogen Contents')
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(,value)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_gri(,value)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(X..N, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_grid(,value)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_grid(,variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_grid( ~variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_grid(~ variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_grid(. ~ variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_grid( ~ variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap( ~ variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(variable ~)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(~ variable)
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'genotype', 'note', 'Rep'))
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')
ggplot(data = melted[melted$Group =='Hybrid' & melted$variable=='ppm.Fe',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
axis.ticks= element_blank()
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
axis.ticks= element_blank()
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank())
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Hybrids under HN and LN')
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Hybrids under HN and LN')
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
library(tidyverse)
library(ggplot2)
library(Matrix)
library(reshape2)
data <- read.csv('Spectrum_with_biochemical_traits_outlier_removal.csv')
data_sub <- subset(data, select = c('PLOT.ID', "X..N" ,"X..P" ,"X..K", "X..S", "X..Ca", "X..Mg", "ppm.Zn", "ppm.Fe", "ppm.Mn",  "ppm.Cu",
"ppm.B", "ppm.Mo", "Rep", "Group", "Trt", "genotype" ,"note"))
data_non_na <- data_sub %>%
View(data_non_na)
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'genotype', 'note', 'Rep'))
data_non_na <- data_sub
View(data_non_na)
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'genotype', 'note', 'Rep'))
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
ggplot(data = melted[melted$Group =='Hybrids',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
data <- read.csv('Spectrum_with_biochemical_traits_outlier_removal_mn.csv')
data_sub <- subset(data, select = c('PLOT.ID', "X..N" ,"X..P" ,"X..K", "X..S", "X..Ca", "X..Mg", "ppm.Zn", "ppm.Fe", "ppm.Mn",  "ppm.Cu",
"ppm.B", "ppm.Mo", "Rep", "Group", "Trt", "genotype" ,"note"))
data_non_na <- data_sub
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'genotype', 'note', 'Rep'))
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
data <- read.csv('Spectrum_with_biochemical_traits_outlier_removal.csv')
data_sub <- subset(data, select = c('PLOT.ID', "X..N" ,"X..P" ,"X..K", "X..S", "X..Ca", "X..Mg", "ppm.Zn", "ppm.Fe", "ppm.Mn",  "ppm.Cu",
"ppm.B", "ppm.Mo", "Rep", "Group", "Trt", "genotype" ,"note"))
data_non_na <- data_sub
melted <- melt(data_non_na, id.vars= c('PLOT.ID', 'Group', 'Trt', 'genotype', 'note', 'Rep'))
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN')
ggplot(data = melted[melted$Group =='Hybrid',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Hybrids under HN and LN - After outlier (1.5 IQR)')
ggplot(data = melted[melted$Group =='Inbred',])  +
geom_density(aes(value, fill=Trt), alpha=0.3)+
theme_bw(14)+
facet_wrap(vars(variable), scales = 'free')+
theme(axis.ticks= element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank())+
labs(title= 'Inbreds under HN and LN - After outlier (1.5 IQR)')
gc()
log(0.05)
log(0.05, base=10)
log(0.05/10355846, base=10)
log(0.05/20355846, base=10)
log(0.05/5000000, base=10)
log(0.05/1000000, base=10)
log(0.05/500000, base=10)
log(0.05/1000000, base=10)
log(0.05/10000000, base=10)
log(0.05/5000000, base=10)
log(0.05/500000, base=10)
log(0.05/5000000 , base= 10)
